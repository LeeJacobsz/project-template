/* ----------------------------------------------------------
sass mixins
---------------------------------------------------------- */
// typekit styles just set sizing and add font
@mixin typekit($weight: 600, $size: 24px, $line-height: 32px) {
	font: $weight #{$size}/#{$line-height} "Helvetica Neue", Arial, Helvetica, sans-serif;
}

// generic button style
@mixin button($from: #55c6f0, $to: #249ee3, $border: #1b93c6, $inset: #ace3f8, $text-shadow: #187bb8) {
	color: $white;
	margin: 10px 0;
	display: inline-block;
	cursor: pointer;
	border-radius: 4px;
	background: $from;
	border: 1px solid $border;
	padding: 7px 20px 7px 20px;
	text-shadow: 0 -1px 1px $text-shadow;
	background: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background: -moz-linear-gradient(top, $from, $to);
	box-shadow: 0 1px 4px #c4c5c8, inset 0 1px 0 $inset;
}

	@mixin button-hover($from: #69bbe7, $to: #0477b4) {
		background: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
		background: -moz-linear-gradient(top, $from, $to);
	}

	@mixin button-active($from: #1b93df, $to: #6ad1f3, $inset: #8bc7ef, $text-shadow: #0f6bb2, $color: #fff) {
		color: $color;
		text-shadow: 0 -1px 1px $text-shadow;
		box-shadow: 0 2px 1px #c4c5c8, inset 0 1px 3px $inset;
		background: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
		background: -moz-linear-gradient(top, $from, $to);
	}

// retina ready background images
// background: url("logo.png") no-repeat; @include image-2x("logo2x.png", 100px, 25px);
@mixin image-2x($image, $width, $height) {
	@media (min--moz-device-pixel-ratio: 1.3),
	(-o-min-device-pixel-ratio: 2.6/2),
	(-webkit-min-device-pixel-ratio: 1.3),
	(min-device-pixel-ratio: 1.3),
	(min-resolution: 1.3dppx) {
		background-image: url($image);
		background-size: $width $height;
	}
}

// arrows you can pass it only the following direction keywords: up, down, left, right
// $include arrow(up, #333, 20ox);
@mixin arrow($direction, $color, $size) {
	display: inline-block;
	width: 0;
	height: 0;
	@if $direction == up {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-bottom: $size solid $color;
	} @else if $direction == down {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-top: $size solid $color;
	} @else if $direction == right {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size solid $color;
	} @else if $direction == left {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-right: $size solid $color;
	}
}

// arrows for buttons (and buttons only)
// these arrows are designed to be used purely with buttons. the top and bottom arrows both
// assume that they want to be centered, you'll need to tweak position to get other behaviour.
@mixin button-arrow($direction, $color, $size) {
	content: "";
	position: absolute;

	@if $direction == right {
		top: 25%;
		right: $size;
		border-left: $size solid $color;
		border-top: $size solid #c01933;
		border-bottom: $size solid #c01933;
	} @else if $direction == left {
		top: 0;
		left: -$size;
		border-right: $size solid $color;
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
	} @else if $direction == down {
		left: 50%;
		bottom: -$size;
		margin-left: -$size;
		border-top: $size solid $color;
		border-left: $size solid transparent;
		border-right: $size solid transparent;
	} @else if $direction == up {
		left: 50%;
		top: -$size;
		margin-left: -$size;
		border-bottom: $size solid $color;
		border-left: $size solid transparent;
		border-right: $size solid transparent;
	}
}

// a navigational arrow on anchor button
// usually to show active state
// inside &:after or &:before
// usage @include active-arrow(up OR down, arrow-color, optional-size, optional-position);
@mixin active-arrow($direction, $background, $size:7px, $position:50%) {

	top: 100%;
	width: 0;
	height: 0;
	content: " ";
	position: absolute;
	pointer-events: none;
	border: solid transparent;
	left: $position; // 50% for center
	border-width: $size;
	margin-left: -$size;
	@content;

	@if $direction == down {
		border-top-color: $background;
	}@else if $direction == up {
		border-bottom-color: $background;
	}
}

// drop downs for example custom styled form drop downs
// usage @include dropdown-arrow
@mixin dropdown-arrow($size, $color) {

	&:after {
		content:"";
		width: 0;
		height: 0;
		top: 50%;
		right: 15px;
		margin-top: -($size/2);
		position: absolute;
		border-style: solid;
		border-width: $size $size 0 $size;
		border-color: $color transparent;
	}
}

// usage:
// $gradient:#000, #fff
// @include gradient($gradient);
@mixin gradient($gradient) {
	background: mix( nth($gradient,1), nth($gradient,2) );
	background: -moz-linear-gradient(top,  nth($gradient,1) 0%, nth($gradient,2) 100%);
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,nth($gradient,1)), color-stop(100%,nth($gradient,2)));
	background: -webkit-linear-gradient(top,  nth($gradient,1) 0%,nth($gradient,2) 100%);
	background: -o-linear-gradient(top,  nth($gradient,1) 0%,nth($gradient,2) 100%);
	background: -ms-linear-gradient(top,  nth($gradient,1) 0%,nth($gradient,2) 100%);
	background: linear-gradient(to bottom,  nth($gradient,1) 0%,nth($gradient,2) 100%);
}
